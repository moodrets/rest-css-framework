$global: (
  important: false,
  prefix: '',
  font-family-base: 'Roboto, Arial, Helvetica, sans-serif',
  font-family-secondary: 'Montserrat, Tahoma, sans-serif',
  font-size-base: 14px,
  base-color: #000,
  button-font-size-base: 14px,
  mobile-first: true,
);

$breakpoint-list: (
	xs: 0, // mandatory
	sm: 420px,
	md: 768px,
	lg: 1024px,
	xl: 1280px,
);

$color-list : (
  disabled: #ccc,
  dark:#000000,
	light:#ffffff,
  theme:#eed5b7,
  theme-1:#cdb79e,
  theme-2:#cdb38b,
	primary:#00bfff,
	primary-1:#00b2ee,
	primary-2:#009acd,
	secondary:#e0e0e0,
	secondary-1:#d8d8d8,
	secondary-2:#a0a0a0,
	success:#00BF32,
	success-1:#269610,
	success-2:#167C0C,
	warning:#FFAF2D,
	warning-1:#FF8719,
  warning-2:#C15A0D,
  info:#87ceff,
	info-1:#7ec0ee,
	info-2:#6ca6cd,
	danger:#ff4040,
	danger-1:#e03939,
  danger-2:#cd3333,
);

$size-list: (
  1: 12px,
  2: 16px,
  3: 20px,
  4: 24px,
  5: 30px,
  6: 32px,
  7: 36px,
  8: 42px,
  9: 48px,
  10: 52px,
  11: 64px,
  12: 72px,
  280: 280px,
  320: 320px,
  480: 480px,
  // mandatory
  full: 100%,
  75per: 75%,
  50per: 50%,
  33per: 33.33%,
  25per: 25%,
  100vh: 100vh,
  75vh: 75vh,
  50vh: 50vh,
  33vh: 33.33vh,
  25vh: 25vh,
  100vw: 100vw,
  75vw: 75vw,
  50vw: 50vw,
  33vw: 33.33vw,
  25vw: 25vw,
  0: 0,
  a: auto,
  inh: inherit,
  'av': available,
  'min-c': min-content,
  'max-c': max-content,
  'fit-c': fit-content,
  'fit-a': fit-available,
);

$opacity-list: (
  100: 1,
  90: .9,
  80: .8,
  70: .7,
  60: .6,
  50: .5,
  40: .4,
  30: .3,
  20: .2,
  10: .1,
  0: 0,
);

$spacing-list: (
  1: 6px,
  2: 4px,
  3: 8px,
  4: 10px,
  5: 12px,
  6: 14px,
  7: 16px,
  8: 20px,
  9: 30px,
  10: 40px,
  11: 50px,
  12: 60px,
  13: 80px,
  0: 0,
);

$spacing-negative-list: (
  1-neg: -6px,
  2-neg: -4px,
  3-neg: -8px,
  4-neg: -10px,
  5-neg: -12px,
  6-neg: -14px,
  7-neg: -16px,
  8-neg: -20px,
  9-neg: -30px,
  10-neg: -40px,
  11-neg: -50px,
  12-neg: -60px,
  13-neg: -80px,
);

$text-color-list: ();
$shadow-color-list: ();
$border-color-list: ();
$background-color-list: ();

@each $color, $value in $color-list {
  $text-color-list: map-merge($text-color-list, (
    #{$color}: rgba(var(--color-#{$color}), var(--text-opacity)),
    current: currentColor,
    trsp: transparent,
  ));
  $shadow-color-list: map-merge($shadow-color-list, (
    #{$color}: rgba(var(--color-#{$color}), var(--shadow-opacity)),
    current: currentColor,
    trsp: transparent,
  ));
  $border-color-list: map-merge($border-color-list, (
    #{$color}: rgba(var(--color-#{$color}), var(--border-opacity)),
    current: currentColor,
    trsp: transparent,
  ));
  $background-color-list: map-merge($background-color-list, (
    #{$color}: rgba(var(--color-#{$color}), var(--background-opacity)),
    current: currentColor,
    trsp: transparent,
  ));
}

$all-utility: (
  properties: (
    all: all,
  ),
  values: (
    un: unset,
    rev: revert,
    int: initial,
  ),
  responsive: true,
  inherit: true,
);

$pointer-events-utility: (
  properties: (
    pe: pointer-events,
  ),
  values: (
    n: none,
    a: auto,
  ),
  responsive: true,
  inherit: true,
);

$user-select-utility: (
  properties: (
    us: user-select,
  ),
  values: (
    all: all,
    txt: text,
    n: none,
  ),
  responsive: false,
  inherit: false,
);

$cursor-utility: (
  properties: (
    cur: cursor,
  ),
  values: (
    p: pointer,
    m: move,
    t: text,
    h: help,
    d: default,
  ),
  responsive: false,
  inherit: false,
  pseudo: (
    h: hover,
    f: focus,
    fw: focus-within,
    fv: focus-visible,
    a: active,
    is-active: is-active,
  ),
);

$opacity-utility: (
  properties: (
    op: opacity,
  ),
  values: $opacity-list,
  responsive: true,
  inherit: true,
);

$radius-utility: (
  properties: (
    rds: border-radius,
    rds-tl: border-top-left-radius,
    rds-tr: border-top-right-radius,
    rds-bl: border-bottom-left-radius,
    rds-br: border-bottom-right-radius,
  ),
  values: (
    1: 4px,
    2: 6px,
    3: 8px,
    4: 10px,
    5: 12px,
    6: 14px,
    7: 16px,
    8: 18px,
    9: 20px,
    10: 22px,
    11: 24px,
    12: 26px,
    13: 28px,
    14: 30px,
    round: 50%,
    pill: 50rem,
    0: 0,
  ),
  responsive: true,
  inherit: true,
);

$float-utility: (
  properties: (
    flt: float,
  ),
  values: (
    l: left,
    r: right,
    n: none,
  ),
  responsive: true,
  inherit: true,
);

$clear-utility: (
  properties: (
    cl: clear,
  ),
  values: (
    l: left,
    r: right,
    bt: both,
    n: none,
  ),
  responsive: true,
  inherit: false,
);

$display-utility: (
  properties: (
    d: display,
  ),
  values: (
    b: block,
    i: inline,
    ib: inline-block,
    g: grid,
    ig: inline-grid,
    f: flex,
    if: inline-flex,
    t: table,
    tr: table-row,
    tc: table-cell,
    tp: table-caption,
    c: contents,
    n: none,
  ),
  responsive: true,
  important: true,
  inherit: false,
);

$position-utility: (
  properties: (
    pos: position,
  ),
  values: (
    rel: relative,
    abs: absolute,
    sti: sticky,
    fx: fixed,
    sta: static,
  ),
  responsive: true,
  inherit: true,
);

$position-directions-utility: (
  properties: (
    pos-cover: (
      top,
      left,
      right,
      bottom
    ),
    pos-l: left,
    pos-r: right,
    pos-t: top,
    pos-b: bottom,
    pos-y: (
      top,
      left
    ),
    pos-x: (
      left,
      right
    ),
  ),
  values: map-merge(
    map-merge(
      $spacing-list,
      $spacing-negative-list,
    ),
    (
      100: 100%,
      50: 50%,
      33: 33%,
      25: 25%,
      a: auto,
    )
  ),
  responsive: true,
  inherit: true,
);

$z-index-utility: (
  properties: (
    z: z-index,
  ),
  values: (
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9,
    10: 10,
    0: 0,
    a: auto,
    1-neg: -1,
    2-neg: -2,
    3-neg: -3,
    4-neg: -4,
    5-neg: -5,
    6-neg: -6,
    7-neg: -7,
    8-neg: -8,
    9-neg: -9,
    10-neg: -10,
    100: 100,
    1000: 1000,
    2000: 2000,
  ),
  responsive: true,
  inherit: false,
);

$box-sizing-utility: (
  properties: (
    bx: box-sizing,
  ),
  values: (
    bb: border-box,
    cb: content-box,
  ),
  responsive: true,
  inherit: true,
);

$visibility-utility: (
  properties: (
    vs: visibility,
  ),
  values: (
    h: hidden,
    v: visible,
  ),
  responsive: true,
  inherit: false,
);

$font-size-utility: (
  properties: (
    font-sz: font-size,
  ),
  values: (
    10: 10px,
    11: 11px,
    12: 12px,
    13: 13px,
    14: 14px,
    15: 15px,
    16: 16px,
    17: 17px,
    18: 18px,
    19: 19px,
    20: 20px,
    21: 21px,
    22: 22px,
    23: 23px,
    24: 24px,
    25: 25px,
    26: 26px,
    27: 27px,
    28: 28px,
    29: 29px,
    30: 30px,
    0: 0,
  ),
  responsive: true,
  inherit: true,
);

$font-weight-utility: (
  properties: (
    font-we: font-weight,
  ),
  values: (
    100: 100,
    200: 200,
    300: 300,
    400: 400,
    500: 500,
    600: 600,
    700: 700,
    800: 800,
    900: 900,
  ),
  responsive: true,
  inherit: true,
);

$font-style-utility: (
  properties: (
    font-st: font-style,
  ),
  values: (
    i: italic,
    n: normal,
  ),
  responsive: false,
  inherit: true,
);

$font-smooth-utility: (
  properties: (
    font-smooth: (
      -webkit-font-smoothing: antialiased,
      -moz-osx-font-smoothing: grayscale,
    ),
    font-smooth-a: (
      -webkit-font-smoothing: auto,
      -moz-osx-font-smoothing: auto,
    )
  ),
);

$font-family-utility: (
  properties: (
    font: font-family,
  ),
  values: (
    base: var(--font-family-base),
    secondary: var(--font-family-secondary),
  ),
  responsive: false,
);

$line-height-utility: (
  properties: (
    lh: line-height,
  ),
  values: (
    '1': 1,
    '1-1': 1.1,
    '1-2': 1.2,
    '1-3': 1.3,
    '1-4': 1.4,
    '1-5': 1.5,
    '1-6': 1.6,
    '1-7': 1.7,
    '1-8': 1.8,
    '1-9': 1.9,
    '2': 2,
    10: 10px,
    11: 11px,
    12: 12px,
    13: 13px,
    14: 14px,
    15: 15px,
    16: 16px,
    17: 17px,
    18: 18px,
    19: 19px,
    20: 20px,
    21: 21px,
    22: 22px,
    23: 23px,
    24: 24px,
    25: 25px,
    26: 26px,
    27: 27px,
    28: 28px,
    29: 29px,
    30: 30px,
    0: 0,
  ),
  responsive: true,
  inherit: true,
);

$letter-spacing-utility: (
  properties: (
    lts: letter-spacing,
  ),
  values: (
    sm: 1px,
    md: 2px,
    lg: 3px,
    xl: 4px,
    nl: normal
  ),
  responsive: true,
);

$border-collapse-utility: (
  properties: (
    bc: border-collapse,
  ),
  values: (
    s: separate,
    c: collapse,
  ),
  responsive: false,
  inherit: false,
);

$table-layout-utility: (
  properties: (
    tl: table-layout,
  ),
  values: (
    f: fixed,
    a: auto,
  ),
  responsive: false,
  inherit: false,
);

$list-types-utility: (
  properties: (
    list: color,
  ),
  values: $text-color-list,
  child: unquote('> li::marker'),
  responsive: false,
  inherit: false,
);

$list-style-type-utility: (
  properties: (
    list: list-style-type,
  ),
  values: (
    ds: disc,
    dc: decimal,
    n: none,
  ),
  responsive: false,
  inherit: false,
);

$list-style-position-utility: (
  properties: (
    list: list-style-position,
  ),
  values: (
    in: inside,
    out: outside,
  ),
  responsive: false,
  inherit: false,
);

$background-utility: (
  properties: (
    bg: background,
  ),
  values: (
    n: none,
  ),
  responsive: true,
  inherit: false,
);

$background-gradient-utility: (
  properties: (
    bg-gr: background-image,
  ),
  values: (
    primary: unquote('linear-gradient(#00bfff, #009acd)'),
    secondary: unquote('linear-gradient(#e0e0e0, #a0a0a0)'),
    success: unquote('linear-gradient(#00BF32, #167C0C)'),
    warning: unquote('linear-gradient(#FFAF2D, #C15A0D)'),
    info: unquote('linear-gradient(#87ceff, #6ca6cd)'),
    danger: unquote('linear-gradient(#ff4040, #cd3333)'),
  ),
  responsive: false,
  inherit: false,
);

$background-colored-utility: (
  properties: (
    bg: background-color,
  ),
  values: $background-color-list,
  responsive: false,
  pseudo: (
    h: hover,
    f: focus,
    a: active,
    fw: focus-within,
    fs: focus-visible,
  ),
  inherit: false,
);

$background-opacity-utility: (
  properties: (
    bg-op: --background-opacity,
  ),
  values: $opacity-list,
  responsive: false,
  pseudo: (
    h: hover,
    f: focus,
  ),
  inherit: false,
);

$background-position-utility: (
  properties: (
    bg-pos: background-position,
  ),
  values: (
    t: top,
    b: bottom,
    l: left,
    r: right,
    c: center,
    lt: left top,
    lb: left right,
    rt: right top,
    rb: right bottom,
  ),
  responsive: true,
  inherit: true,
);

$background-attachment-utility: (
  properties: (
    bg-att: background-attachment,
  ),
  values: (
    sc: scroll,
    lc: local,
    fx: fixed,
  ),
  responsive: true,
  inherit: true,
);

$background-repeat-utility: (
  properties: (
    bg-rep: background-repeat,
  ),
  values: (
    '': repeat,
    x: repeat-y,
    y: repeat-x,
    nr: no-repeat,
  ),
  responsive: true,
  inherit: true,
);

$background-size-utility: (
  properties: (
    bg-sz: background-size,
  ),
  values: (
    cv: cover,
    cn: contain,
    a: auto,
  ),
  responsive: true,
  inherit: true,
);

$background-clip-utility: (
  properties: (
    bg-cl: background-clip,
  ),
  values: (
    bb: border-box,
    pb: padding-box,
    cb: content-box,
    txt: text,
  ),
  responsive: true,
  inherit: true,
);

$width-utility: (
  properties: (
    wd: width,
  ),
  values: $size-list,
  responsive: true,
  inherit: true,
);

$max-width-utility: (
  properties: (
    max-wd: max-width,
  ),
  values: $size-list,
  responsive: true,
  inherit: true,
);

$min-width-utility: (
  properties: (
    min-wd: min-width,
  ),
  values: $size-list,
  responsive: true,
  inherit: true,
);

$height-utility: (
  properties: (
    he: height,
  ),
  values: $size-list,
  responsive: true,
  inherit: true,
);

$max-height-utility: (
  properties: (
    max-he: max-height,
  ),
  values: $size-list,
  responsive: true,
  inherit: true,
);

$min-height-utility: (
  properties: (
    min-he: min-height,
  ),
  values: $size-list,
  responsive: true,
  inherit: true,
);

$size-utility: (
  properties: (
    sz: (
      width,
      height
    ),
  ),
  values: $size-list,
  responsive: true,
  inherit: true,
);

$margin-utility: (
  properties: (
    m: margin,
    mt: margin-top,
    ml: margin-left,
    mr: margin-right,
    mb: margin-bottom,
    my: (
      margin-top,
      margin-bottom,
    ),
    mx: (
      margin-left,
      margin-right,
    ),
  ),
  values: map-merge(
    map-merge(
      $spacing-list,
      $spacing-negative-list,
    ),
    (a: auto)
  ),
  responsive: true,
  inherit: true,
);

$padding-utility: (
  properties: (
    p: padding,
    pt: padding-top,
    pl: padding-left,
    pr: padding-right,
    pb: padding-bottom,
    py: (
      padding-top,
      padding-bottom,
    ),
    px: (
      padding-left,
      padding-right,
    ),
  ),
  values: $spacing-list,
  responsive: true,
  inherit: true,
);

$overflow-utility: (
  properties: (
    ov: overflow,
    ov-x: overflow-x,
    ov-y: overflow-y,
  ),
  values: (
    h: hidden,
    v: visible,
    s: scroll,
    a: auto,
  ),
  responsive: true,
  inherit: true,
);

$overflow-touch-utility: (
  properties: (
    ov: -webkit-overflow-scrolling,
  ),
  values: (
    t: touch,
  ),
  responsive: false,
  inherit: false,
);

$overscroll-behavior-utility: (
  properties: (
    ovb: overscroll-behavior,
    ovb-y: overscroll-behavior-y,
    ovb-x: overscroll-behavior-x,
  ),
  values: (
    a: auto,
    cn: contain,
    n: none,
  ),
  responsive: false,
  inherit: false,
);

$scroll-snap-type-utility: (
  properties: (
    sc: scroll-snap-type,
  ),
  values: (
    b: block,
    inline: inline,
    x: x,
    xm: x mandatory,
    y: y,
    yp: y proximity,
    bt: both,
    btm: both mandatory,
    n: none,
  ),
  responsive: true,
  inherit: true,
);

$vertical-align-utility: (
  properties: (
    va: vertical-align,
  ),
  values: (
    t: top,
    b: bottom,
    m: middle,
    tt: text-top,
    tb: text-bottom,
  ),
  responsive: true,
  inherit: true,
);

$vertical-align-childs-utility: (
  properties: (
    va: vertical-align,
  ),
  values: (
    t-ch: top,
    b-ch: bottom,
    m-ch: middle,
    tt-ch: text-top,
    tb-ch: text-bottom,
  ),
  child: unquote('> *'),
  responsive: true,
  inherit: true,
);

$container-utility: (
  properties: (
    container: (
      max-width
    ),
  ),
  values: (
    '': 1320px,
    sm: 820px,
  ),
  responsive: false,
  inherit: false,
);

$object-fit-utility: (
  properties: (
    ob-f: object-fit,
  ),
  values: (
    c: cover,
    f: fill,
    cn: contain,
    sd: scale-down,
    n: none,
  ),
  responsive: true,
  inherit: true,
);

$object-position-utility: (
  properties: (
    ob-p: object-position,
  ),
  values: (
    l: left,
    r: right,
    t: top,
    b: bottom,
    c: center,
    lt: left top,
    lb: left bottom,
    rt: right bottom,
    rb: right bottom,
  ),
  responsive: true,
  inherit: true,
);

$text-align-utility: (
  properties: (
    txt: text-align,
  ),
  values: (
    s: start,
    e: end,
    l: left,
    r: right,
    c: center,
  ),
  responsive: true,
  inherit: true,
);

$text-align-justify-utility: (
  properties: (
    txt: (
      text-align,
      -moz-text-align-last,
      text-align-last
    ),
  ),
  values: (
    j: justify,
  ),
  responsive: true,
  inherit: false,
);

$text-decoration-utility: (
  properties: (
    td: text-decoration,
  ),
  values: (
    n: none,
    u: undeline,
    o: overline,
    l: line-through
  ),
  pseudo: (
    h: hover,
    f: focus,
  ),
  responsive: false,
  inherit: true,
);

$text-transform-utility: (
  properties: (
    tt: text-transform,
  ),
  values: (
    c: capitalize,
    l: lowercase,
    u: uppercase,
    n: none,
  ),
  pseudo: (
    h: hover,
    f: focus,
  ),
  responsive: false,
  inherit: true,
);

$word-wrap-utility: (
  properties: (
    ww: word-wrap,
  ),
  values: (
    nl: normal,
    bw: break-word,
  ),
  responsive: true,
  inherit: true,
);

$word-break-utility: (
  properties: (
    wb: word-break,
  ),
  values: (
    nl: normal,
    br: break-all,
    kp: keep-all,
    bw: break-word,
  ),
  responsive: true,
  inherit: true,
);

$white-space-utility: (
  properties: (
    wh: white-space,
  ),
  values: (
    nl: normal,
    nw: nowrap,
    pr: pre,
    prw: pre-wrap,
    prl: pre-line,
    bs: break-spaces,
  ),
  responsive: true,
  inherit: true,
);

$text-colored-utility: (
  properties: (
    txt: color,
  ),
  values: $text-color-list,
  pseudo: (
    h: hover,
    f: focus,
    fw: focus-within,
    fv: focus-visible,
    a: active,
    v: visited,
    is-active: is-active,
    pl: ':placeholder',
    gh: group-hover,
    gf: group-focus,
    ga: group-active,
  ),
  responsive: false,
  inherit: false,
);

$text-opacity-utility: (
  properties: (
    txt-op: --text-opacity,
  ),
  values: $opacity-list,
  responsive: false,
  pseudo: (
    h: hover,
    f: focus,
  ),
  inherit: false,
);

$text-truncate-utility: (
  properties: (
    txt-trn: (
      overflow: hidden,
      text-overflow: ellipsis,
      white-space: nowrap,
    ),
    txt-trn-res: (
      overflow: visible,
      text-overflow: clip,
      white-space: normal,
    )
  ),
  responsive: true,
);

$shadow-utility: (
  properties: (
    sh: (
      --shadow-x: 0,
      --shadow-y: 0,
      --shadow-scattering: 0,
      --shadow-width: 2px,
      --shadow-color: #000,
      --shadow-opacity: 1,
      box-shadow: var(--shadow-x) var(--shadow-y) var(--shadow-scattering) var(--shadow-width) var(--shadow-color),
    )
  ),
  responsive: false,
);

$shadow-colored-utility: (
  properties: (
    sh: --shadow-color,
  ),
  values: $shadow-color-list,
  responsive: false,
  pseudo: (
    h: hover,
    f: focus,
    fw: focus-within,
    fv: focus-visible,
    a: active,
    is-active: is-active,
  ),
  inherit: false,
);

$shadow-scattering-utility: (
  properties: (
    sh-sc: --shadow-scattering,
  ),
  values: (
    1: 1px,
    2: 2px,
    3: 3px,
    4: 4px,
    5: 5px,
    6: 6px,
    7: 7px,
    8: 8px,
    9: 9px,
    10: 10px,
    11: 11px,
    12: 12px,
    0: 0,
  ),
  responsive: false,
  pseudo: (
    h: hover,
    f: focus,
    fw: focus-within,
    fv: focus-visible,
    a: active,
    is-active: is-active,
  ),
  inherit: false,
);

$shadow-horizonal-utility: (
  properties: (
    sh-x: --shadow-x,
  ),
  values: (
    1: 1px,
    2: 2px,
    3: 3px,
    4: 4px,
    5: 5px,
    6: 6px,
    7: 7px,
    8: 8px,
    9: 9px,
    10: 10px,
    11: 11px,
    12: 12px,
    0: 0,
  ),
  responsive: false,
  pseudo: (
    h: hover,
    f: focus,
    fw: focus-within,
    fv: focus-visible,
    a: active,
    is-active: is-active,
  ),
  inherit: false,
);

$shadow-vertical-utility: (
  properties: (
    sh-y: --shadow-y,
  ),
  values: (
    1: 1px,
    2: 2px,
    3: 3px,
    4: 4px,
    5: 5px,
    6: 6px,
    7: 7px,
    8: 8px,
    9: 9px,
    10: 10px,
    11: 11px,
    12: 12px,
    0: 0,
  ),
  responsive: false,
  pseudo: (
    h: hover,
    f: focus,
    fw: focus-within,
    fv: focus-visible,
    a: active,
    is-active: is-active,
  ),
  inherit: false,
);

$shadow-width-utility: (
  properties: (
    sh-wd: --shadow-width,
  ),
  values: (
    1: 1px,
    2: 2px,
    3: 3px,
    4: 4px,
    5: 5px,
    6: 6px,
    7: 7px,
    8: 8px,
    9: 9px,
    10: 10px,
    11: 11px,
    12: 12px,
    0: 0,
  ),
  responsive: false,
  pseudo: (
    h: hover,
    f: focus,
    fw: focus-within,
    fv: focus-visible,
    a: active,
    is-active: is-active,
  ),
  inherit: false,
);

$shadow-opacity-utility: (
  properties: (
    sh-op: --shadow-opacity,
  ),
  values: $opacity-list,
  responsive: false,
  pseudo: (
    h: hover,
    f: focus,
  ),
  inherit: false,
);

$shadow-types-utility: (
  properties: (
    sh: box-shadow,
  ),
  values: (
    1: unquote('rgba(50, 50, 93, 0.25) 0 2px 5px -1px, rgba(0, 0, 0, 0.3) 0 1px 3px -1px'),
    2: unquote('rgba(50, 50, 93, 0.25) 0 6px 12px -2px, rgba(0, 0, 0, 0.3) 0 3px 7px -3px'),
    3: unquote('rgba(50, 50, 93, 0.25) 0 13px 27px -5px, rgba(0, 0, 0, 0.3) 0 8px 16px -8px'),
    4: unquote('rgba(0, 0, 0, 0.19) 0 10px 20px, rgba(0, 0, 0, 0.23) 0 6px 6px'),
    in-1: unquote('inset rgba(50, 50, 93, 0.25) 0 2px 5px -1px, inset rgba(0, 0, 0, 0.3) 0 1px 3px -1px'),
    in-2: unquote('inset rgba(50, 50, 93, 0.25) 0 6px 12px -2px, inset rgba(0, 0, 0, 0.3) 0 3px 7px -3px'),
    in-3: unquote('inset rgba(50, 50, 93, 0.25) 0 13px 27px -5px, inset rgba(0, 0, 0, 0.3) 0 8px 16px -8px'),
    in-4: unquote('inset rgba(0, 0, 0, 0.19) 0 10px 20px, inset rgba(0, 0, 0, 0.23) 0 6px 6px'),
    n: none,
  ),
  responsive: true,
  pseudo: (
    h: hover,
    f: focus,
    fw: focus-within,
    fv: focus-visible,
    a: active,
    is-active: is-active,
  ),
  inherit: true,
);

$outline-utility: (
  properties: (
    out: outline,
  ),
  values: (
    n: none,
  ),
  responsive: false,
  inherit: true,
);

$border-utility: (
  properties: (
    bdr: border,
    bdr-t: border-top,
    bdr-l: border-left,
    bdr-r: border-right,
    bdr-b: border-bottom,
    bdr-y: (
      border-left,
      border-right,
    ),
    bdr-x: (
      border-top,
      border-bottom,
    ),
  ),
  values: (
    '': 1px solid var(--border-color),
  ),
  responsive: true,
  inherit: true,
);

$border-width-utility: (
  properties: (
    bdr: border-width,
    bdr-t: border-top-width,
    bdr-l: border-left-width,
    bdr-r: border-right-width,
    bdr-b: border-bottom-width,
    bdr-y: (
      border-left-width,
      border-right-width,
    ),
    bdr-x: (
      border-top-width,
      border-bottom-width,
    ),
  ),
  values: (
    wd-1: 1px,
    wd-2: 2px,
    wd-3: 3px,
    wd-4: 4px,
    wd-5: 5px,
    wd-6: 6px,
    wd-7: 7px,
    wd-8: 8px,
    wd-9: 9px,
    wd-10: 10px,
    wd-11: 11px,
    wd-12: 12px,
    wd-0: 0,
  ),
  responsive: true,
  inherit: false,
);

$border-style-utility: (
  properties: (
    bdr: border-style,
    bdr-t: border-top-style,
    bdr-l: border-left-style,
    bdr-r: border-right-style,
    bdr-b: border-bottom-style,
    bdr-y: (
      border-left-style,
      border-right-style,
    ),
    bdr-x: (
      border-top-style,
      border-bottom-style,
    ),
  ),
  values: (
    dsh: dashed,
    dt: dotted,
    sl: solid,
  ),
  responsive: true,
  pseudo: (
    h: hover,
    f: focus,
    fw: focus-within,
    fv: focus-visible,
    a: active,
    is-active: is-active,
  ),
  inherit: false,
);

$border-colored-utility: (
  properties: (
    bdr: --border-color,
  ),
  values: $border-color-list,
  responsive: false,
  pseudo: (
    h: hover,
    f: focus,
    fw: focus-within,
  ),
  inherit: false,
);

$border-opacity-utility: (
  properties: (
    bdr-op: --border-opacity,
  ),
  values: $opacity-list,
  responsive: false,
  pseudo: (
    h: hover,
    f: focus,
  ),
  inherit: false,
);

$columns-utility: (
  properties: (
    clm: columns,
  ),
  values: (
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9,
    10: 10,
    11: 11,
    12: 12,
  ),
  responsive: true,
  inherit: false,
);

$columns-gap-utility: (
  properties: (
    clm-gap: column-gap,
  ),
  values: map-merge($spacing-list, (
    nl: normal,
  )),
  responsive: true,
  inherit: false,
);

$flex-wrap-utility: (
  properties: (
    fw: flex-wrap,
  ),
  values: (
    wr: wrap,
    nw: nowrap,
    wrr: wrap-reverse,
  ),
  responsive: true,
  inherit: true,
);

$flex-direction-utility: (
  properties: (
    fd: flex-direction,
  ),
  values: (
    r: row,
    rr: row-reverse,
    c: column,
    cr: column-reverse,
  ),
  responsive: true,
  inherit: true,
);

$flex-item-utility: (
  properties: (
    fl: flex,
  ),
  values: (
    fill: 1 1 0,
    n: none,
  ),
  responsive: true,
  inherit: true,
);

$flex-item-child-utility: (
  properties: (
    fl-ch: flex,
  ),
  values: (
    fill: 1 1 0,
    n: none,
  ),
  child: unquote('> *'),
  responsive: true,
  inherit: true,
);

$flex-shrink-utility: (
  properties: (
    fl-sh: flex-shrink,
  ),
  values: (
    1: 1,
    0: 0,
  ),
  responsive: true,
  inherit: true,
);

$flex-grow-utility: (
  properties: (
    fl-gr: flex-grow,
  ),
  values: (
    1: 1,
    0: 0,
  ),
  responsive: true,
  inherit: true,
);

$order-utility: (
  properties: (
    or: order,
  ),
  values: (
    0: 0,
    1: 1,
    2: 2,
    3: 2,
    4: 2,
    5: 2,
    6: 2,
    7: 2,
    8: 2,
    9: 2,
    10: 2,
    11: 2,
    12: 2,
    l: 13,
    f: -1,
  ),
  responsive: true,
  inherit: false,
);

$justify-content-utility: (
  properties: (
    jc: justify-content,
  ),
  values: (
    st: stretch,
    s: start,
    e: end,
    l: left,
    r: right,
    c: center,
    fs: flex-start,
    fe: flex-end,
    bs: baseline,
    fbs: first baseline,
    lbs: last baseline,
    sb: space-between,
    sa: space-around,
    se: space-evenly,
    sc: safe center,
    uc: unsafe center,
  ),
  responsive: true,
  inherit: true,
);

$justify-items-utility: (
  properties: (
    ji: justify-items,
  ),
  values: (
    a: auto,
    n: normal,
    st: stretch,
    c: center,
    s: start,
    e: end,
    fs: flex-start,
    fe: flex-end,
    ss: self-start,
    se: self-end,
    l: left,
    r: right,
    bs: baseline,
    fbs: first baseline,
    lbs: last baseline,
    sc: safe center,
    uc: unsafe center,
    ll: legacy right,
    lr: legacy right,
    lc: legacy center,
  ),
  responsive: true,
  inherit: true,
);

$justify-self-utility: (
  properties: (
    js: justify-self,
  ),
  values: (
    a: auto,
    n: normal,
    st: stretch,
    c: center,
    s: start,
    e: end,
    fs: flex-start,
    fe: flex-end,
    ss: self-start,
    se: self-end,
    l: left,
    r: right,
    bs: baseline,
    fbs: first baseline,
    lbs: last baseline,
    sc: safe center,
    uc: unsafe center,
  ),
  responsive: true,
  inherit: true,
);

$align-items-utility: (
  properties: (
    ai: align-items,
  ),
  values: (
    nl: normal,
    st: stretch,
    c: center,
    s: start,
    e: end,
    fs: flex-start,
    fe: flex-end,
    bs: baseline,
    fbs: first baseline,
    lbs: last baseline,
    sc: safe center,
    uc: unsafe center,
  ),
  responsive: true,
  inherit: true,
);

$align-content-utility: (
  properties: (
    ac: align-content,
  ),
  values: (
    nl: normal,
    st: stretch,
    c: center,
    s: start,
    e: end,
    fs: flex-start,
    fe: flex-end,
    bs: baseline,
    fbs: first baseline,
    lbs: last baseline,
    sb: space-between,
    sa: space-around,
    se: space-evenly,
    sc: safe center,
    uc: unsafe center,
  ),
  responsive: true,
  inherit: true,
);

$align-self-utility: (
  properties: (
    as: align-self,
  ),
  values: (
    a: auto,
    st: stretch,
    nl: normal,
    c: center,
    s: start,
    e: end,
    ss: self-start,
    se: self-end,
    fs: flex-start,
    fe: flex-end,
    bs: baseline,
    fbs: first baseline,
    lbs: last baseline,
    sc: safe center,
    uc: unsafe center,
  ),
  responsive: true,
  inherit: true,
);

$grid-utility: (
  properties: (
    col: grid-template-columns,
    row: grid-template-rows,
  ),
  values: (
    1: repeat(1, minmax(0, 1fr)),
    2: repeat(2, minmax(0, 1fr)),
    3: repeat(3, minmax(0, 1fr)),
    4: repeat(4, minmax(0, 1fr)),
    5: repeat(5, minmax(0, 1fr)),
    6: repeat(6, minmax(0, 1fr)),
    7: repeat(7, minmax(0, 1fr)),
    8: repeat(8, minmax(0, 1fr)),
    9: repeat(9, minmax(0, 1fr)),
    10: repeat(10, minmax(0, 1fr)),
    11: repeat(11, minmax(0, 1fr)),
    12: repeat(12, minmax(0, 1fr)),
    n: none
  ),
  responsive: true,
);

$grid-span-utility: (
  properties: (
    col-span: grid-column,
    row-span: grid-row,
  ),
  values: (
    a: auto,
    1: span 1 / span 1,
    2: span 2 / span 2,
    3: span 3 / span 3,
    4: span 4 / span 4,
    5: span 5 / span 5,
    6: span 6 / span 6,
    7: span 7 / span 7,
    8: span 8 / span 8,
    9: span 9 / span 9,
    10: span 10 / span 10,
    11: span 11 / span 11,
    12: span 12 / span 12,
    full: 1 / -1,
  ),
  responsive: true,
);

$grid-start-end-utility: (
  properties: (
    col-start: grid-column-start,
    col-end: grid-column-end,
    row-start: grid-row-start,
    row-end: grid-row-end,
  ),
  values: (
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9,
    10: 10,
    11: 11,
    12: 12,
    13: 13,
    a: auto,
  ),
  responsive: true,
);

$grid-flow-utility: (
  properties: (
    flow: grid-auto-flow,
  ),
  values: (
    r: row,
    c: column,
    rd: row dense,
    cd: column dense,
  ),
  responsive: true,
);

$grid-auto-columns-utility: (
  properties: (
    col-auto: grid-auto-columns,
  ),
  values: (
    a: auto,
    min-c: min-content,
    max-c: max-content,
    fr: minmax(0, 1fr),
  ),
  responsive: true,
);

$grid-gap-utility: (
  properties: (
    gap: gap,
    gap-x: column-gap,
    gap-y: row-gap,
  ),
  values: map-merge($spacing-list, (
    nl: normal,
  )),
  responsive: true,
);

$case-utility: (
  properties: (
    case: (
      display: flex,
      flex-wrap: wrap,
    )
  ),
);

$case-cells-utility: (
  properties: (
    case-cells: (
      flex-basis,
      max-width,
    )
  ),
  values: (
    1: calc(100% / 1),
    2: calc(100% / 2),
    3: calc(100% / 3),
    4: calc(100% / 4),
    5: calc(100% / 5),
    6: calc(100% / 6),
    7: calc(100% / 7),
    8: calc(100% / 8),
    9: calc(100% / 9),
    10: calc(100% / 10),
    11: calc(100% / 11),
    12: calc(100% / 12),
  ),
  child: unquote('> [class*="cell"]:not([class*="cell-"])'),
  responsive: true,
);

$cell-utility: (
  properties: (
    cell : (
      flex-basis: 0,
      flex-grow: 1,
      max-width: 100%,
    )
  ),
  responsive: false,
);

$cell-width-utility: (
  properties: (
    cell: (
      flex-basis,
      max-width,
    )
  ),
  values: (
    1: unquote('calc(100% * 1 / 12)'),
    2: unquote('calc(100% * 2 / 12)'),
    3: unquote('calc(100% * 3 / 12)'),
    4: unquote('calc(100% * 4 / 12)'),
    5: unquote('calc(100% * 5 / 12)'),
    6: unquote('calc(100% * 6 / 12)'),
    7: unquote('calc(100% * 7 / 12)'),
    8: unquote('calc(100% * 8 / 12)'),
    9: unquote('calc(100% * 9 / 12)'),
    10: unquote('calc(100% * 10 / 12)'),
    11: unquote('calc(100% * 11 / 12)'),
    12: unquote('calc(100% * 12 / 12)'),
  ),
  responsive: true,
);

$transition-utility: (
  properties: (
    trs: transition,
  ),
  values: (
    '03': all .3s,
    '05': all .5s,
    '07': all .7s,
    '1': all 1s,
  ),
  responsive: true,
);

$transform-utility: (
  properties: (
    trf: (
      --rotate: 0,
      --translate-x: 0,
      --translate-y: 0,
      --scale-x: 1,
      --scale-y: 1,
      --skew-x: 0,
      --skew-y: 0,
      transform: translate3d(var(--translate-x), var(--translate-y), 0) rotate(var(--rotate)) skewX(var(--skew-x)) skewY(var(--skew-y)) scaleX(var(--scale-x)) scaleY(var(--scale-y)),
    )
  ),
);

$transform-scale-utility: (
  properties: (
    trf-sc-x: (
      --scale-x,
    ),
    trf-sc-y: (
      --scale-y,
    ),
    trf-sc: (
      --scale-x,
      --scale-y,
    ),
  ),
  values: (
    1: 1,
    '1-1': 1.1,
    '1-2': 1.2,
    '1-3': 1.3,
    '1-4': 1.4,
    '1-5': 1.5,
    0: 0,
  ),
  responsive: true,
  pseudo: (
    h: hover,
  )
);

$transform-translate-utility: (
  properties: (
    trf-tr-x: (
      --translate-x,
    ),
    trf-tr-y: (
      --translate-y,
    ),
    trf-tr: (
      --translate-y,
      --translate-x,
    ),
  ),
  values: (
    50: 50%,
    100: 100%,
    50-neg: -50%,
    100-neg: -100%,
    0: 0,
  ),
  responsive: true,
);

$transform-rotate-utility: (
  properties: (
    trf-rt: (
      --rotate,
    ),
  ),
  values: (
    45: 45deg,
    90: 45deg,
    180: 45deg,
    45-neg: 45deg,
    90-neg: 45deg,
    180-neg: 45deg,
    0: 0,
  ),
  responsive: true,
);

$transform-skew-utility: (
  properties: (
    trf-sk-x: (
      --skew-x,
    ),
    trf-sk-y: (
      --skew-y,
    ),
    trf-sk: (
      --skew-y,
      --skew-x,
    ),
  ),
  values: (
    3: 3deg,
    6: 6deg,
    9: 6deg,
    3-neg: -3deg,
    6-neg: -6deg,
    9-neg: -9deg,
    0: 0,
  ),
  responsive: true,
);

$transform-origin-utility: (
  properties: (
    trf-or: transform-origin,
  ),
  values: (
    c: center,
    t: top,
    b: bottom,
    l: left,
    r: right,
    tl: top left,
    tr: top right,
    bl: bottom left,
    br: bottom right,
  ),
  responsive: true,
);

$transform-toggle-utility: (
  properties: (
    fade-start: (
      opacity: 0,
      visibility: hidden
    ),
    show-start: (
      opacity: 0,
      transition-duration: 0s,
      visibility: hidden
    ),
    scale-0-start: (
      --scale-x: 0,
      --scale-y: 0,
      visibility: hidden
    ),
    scale-1-2-start: (
      --scale-x: 1,
      --scale-y: 1,
    ),
    slide-left-start: (
      --translate-x: -110%,
      opacity: 0,
      visibility: hidden
    ),
    slide-right-start: (
      --translate-x: 110%,
      opacity: 0,
      visibility: hidden
    ),
    slide-top-start: (
      --translate-y: -110%,
      opacity: 0,
      visibility: hidden
    ),
    slide-bottom-start: (
      --translate-y: 110%,
      opacity: 0,
      visibility: hidden
    )
  ),
);

$transform-toggle-active-utility: (
  properties: (
    fade-end: (
      opacity: 1,
      visibility: visible
    ),
    show-end: (
      opacity: 1,
      transition-duration: 0s,
      visibility: visible
    ),
    scale-0-end: (
      --scale-x: 1,
      --scale-y: 1,
      visibility: visible
    ),
    scale-1-2-end: (
      --scale-x: 1.2,
      --scale-y: 1.2,
    ),
    slide-left-end: (
      --translate-x: 0,
      opacity: 1,
      visibility: visible
    ),
    slide-right-end: (
      --translate-x: 0,
      opacity: 1,
      visibility: visible
    ),
    slide-top-end: (
      --translate-y: 0,
      opacity: 1,
      visibility: visible
    ),
    slide-bottom-end: (
      --translate-y: 0,
      opacity: 1,
      visibility: visible
    )
  ),
  pseudo: (
    gh: group-hover,
    gf: group-focus,
    ga: group-active,
  ),
);

$media-width: if(map-get($global, mobile-first), 'min', 'max');

// use this vars in media query @media($sm) {...}
$sm: '#{$media-width}-width: (#{map-get($breakpoint-list, sm)})';
$md: '#{$media-width}-width: (#{map-get($breakpoint-list, md)})';
$lg: '#{$media-width}-width: (#{map-get($breakpoint-list, lg)})';
$xl: '#{$media-width}-width: (#{map-get($breakpoint-list, xl)})';

:root {
  --text-opacity: 1;
  --placeholder-opacity: 1;
  --border-opacity: 1;
  --background-opacity: 1;
  --shadow-opacity: 1;
  --border-color: #000;
  @each $color, $value in $color-list {--color-#{$color}: #{hex-to-rgb($value)};}
  @each $var, $value in $global {--#{$var}: #{$value};}
}
