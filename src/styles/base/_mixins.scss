@mixin font-face($name, $path, $weight: normal, $style: normal, $display: swap) {
  @font-face {
    font-family: $name;
    font-weight: $weight;
    font-style: $style;
    font-display: $display;
    src: url("#{$font-path}#{$path}.woff2") format("woff2"), url("#{$font-path}#{$path}.woff") format("woff");
  }
}

@mixin breakpoint-up($name, $size) {
	@if ($name == 'xs') {
		@content;
	} @else {
		@media (#{$media-width}-width: $size) {
			@content;
		}
	}
}

@mixin apply-utility-content($utility, $br-name: ''){
  $first-prop-key: nth(nth(map-get($utility, properties), 1), 1);
  $first-prop-value: nth(nth(map-get($utility, properties), 1), 2);
  $child-selector: if(map-get($utility, child), map-get($utility, child), '');
  @each $key, $value in map-get($utility, values) {
    $key-type: if($key != '', '-'+$key, '');
    $placeholder: null;
    @each $prop, $prop-value in map-get($utility, properties) {
      $placeholder: if($prop == 'plc', '::placeholder', '');
      .#{$prop}#{$key-type}#{$placeholder}#{$br-name} #{$child-selector} {
        @each $item in $prop-value {
          #{$item}: $value
        }
      }
      @if (map-get($utility, states)) {
        @each $state, $pseudo in map-get($utility, states) {
          $pseudo-type: if($pseudo == 'is-active', '.#{$pseudo}', ':#{$pseudo}');
          $group-hover: if($state == 'group-hover', '.#{$state}:hover', '');
          $group-focus: if($state == 'group-focus', '.#{$state}:focus', '');
          @if ($state == 'group-hover') {$state: ''; $pseudo-type: 'hover';}
          @if ($state == 'group-focus') {$state: ''; $pseudo-type: 'focus';}
          #{$group-hover} #{$group-focus} .#{$prop}#{$key-type}\:#{$state}#{$pseudo-type}#{$placeholder}#{$br-name} {
            @each $item in $prop-value {
              #{$item}: $value
            }
          }
        }
      }
    }
  }
  @if (map-get($utility, inherit)) {
    $inherit-class: if(map-get($utility, inherit-class), map-get($utility, inherit-class), 'inh');
    .#{$first-prop-key}-#{$inherit-class}#{$br-name} #{$child-selector} {
      @each $item in $first-prop-value {
        #{$item}: inherit
      }
    }
  }
}

@mixin apply-utility-content-multiprops($utility, $br-name: '') {
  @each $key, $value in map-get($utility, properties) {
    $key-type: if($key == '', '#{$key}', '-#{$key}');
    @each $state-key, $state-value in map-get($utility, parent-states) {
      $pseudo-type: if($state-key == 'is-active', '.#{$state-value}', ':#{$state-value}');
      $parent: if(map-get($utility, parent), '#{map-get($utility, parent)}\\:#{$state-key}#{$pseudo-type}', '');
      #{$parent} .#{map-get($utility, prefix-class)}#{$key-type}#{$br-name} {
        @each $prop, $prop-value in $value {
          #{$prop}: #{$prop-value}
        }
      }
    }
  }
}

@mixin apply-utility($utility) {
  @if (map-get($utility, responsive)) {
    @each $name, $size in $breakpoint-list {
      @include breakpoint-up($name, $size) {
        $br-name: breakpoint-infix($name);
        @if (map-get($utility, multiprops)) {
          @include apply-utility-content-multiprops($utility, $br-name);
        } @else {
          @include apply-utility-content($utility, $br-name);
        }
      }
    }
  } @else {
    @if (map-get($utility, multiprops)) {
      @include apply-utility-content-multiprops($utility);
    } @else {
      @include apply-utility-content($utility);
    }
  }
}
